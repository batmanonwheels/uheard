generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                  String                @id @unique
  name                String
  email               String                @unique
  picture             String?
  spotifyUser         Boolean               @default(true)
  spotifyProfileLink  String
  spotifyUri          String
  accessToken         String
  tokenExpiresIn      Int
  refreshToken        String
  createdAt           DateTime              @default(now()) @db.Timestamp(6)
  updatedAt           DateTime              @updatedAt
  tokenExpiresAt      DateTime              @default(dbgenerated("(now() + '01:00:00'::interval)")) @db.Timestamp(6)
  username            String                @unique
  albumRecommendation AlbumRecommendation[]
  likes               Like[]
  session             Session[]
  TrackRecommendation TrackRecommendation[]
}

model Session {
  id             String @id @unique
  active_expires BigInt
  idle_expires   BigInt
  user_id        String
  username       String
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model AlbumRecommendation {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  albumId     String
  userId      String
  albumTitle  String
  albumUrl    String
  albumImage  String
  albumArtist String[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
}

model Like {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now()) @db.Timestamp(6)
  userId                String
  albumRecommendationId Int?
  albumRecommendation   AlbumRecommendation? @relation(fields: [albumRecommendationId], references: [id])
  trackRecommendationId Int?
  TrackRecommendation   TrackRecommendation? @relation(fields: [trackRecommendationId], references: [id], onDelete: Cascade)
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrackRecommendation {
  id              Int      @id(map: "Recommendation_pkey") @default(autoincrement())
  createdAt       DateTime @default(now()) @db.Timestamp(6)
  trackId         String
  userId          String
  trackPreviewUrl String
  trackTitle      String
  trackUrl        String
  trackAlbum      String
  trackISRC       String
  trackImage      String
  trackArtist     String[]
  likes           Like[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
